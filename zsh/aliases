alias grep='grep --color=auto -i'
alias ll='ls -alFh'
alias la='ls -A'
alias l='ls -CF'
alias kill9='kill -9'
alias pgrep='ps aux | grep --color=auto -i'
alias lsPorts='sudo lsof -i -P -n'

## maven
alias mcc='mvn clean compile'
alias mct='mvn clean test'
alias mcit='mvn clean integration-test'
alias mld='mvn clean process-resources liquibase:dropAll'
alias mlu='mvn clean process-resources liquibase:update'
alias mcj='mvn clean jetty:run'

## git
alias gbye='git add --all; git reset --hard HEAD'
alias gs='git status'
alias gb='git branch'
alias gma='git commit -am'
alias gmm='git commit -m'
alias gc='git checkout'
alias ga='git add'
alias gall='git add --all'
alias gp='git pull'

log(){
    echo ">>>>> $1"
    echo
}

get_alias() {
    local git_name=$(git config user.name)
    local name=${git_name// /}
    local name=${name:l}

    echo $name
}

run_command() {
    local command=$1

    echo "\n    𐦚𐦚𐦚 Running command: 𐦲𐦲 $command 𐦲𐦲\n"
    eval "$command"
}

get_master_branch() {
    local branch_indicator=$(git branch -l master main)
    # the output could be "  master" or "* master"
    # need to remove first two characters
    local master_branch=${branch_indicator:2}

    if [[ $master_branch == "master" ]] || [[ $master_branch == "main" ]]; then
        echo ${branch_indicator:2}
    else
        echo "Wrong branch name!!"
        exit 1
    fi
}

get_current_branch() {
    local current_branch=$(git rev-parse --abbrev-ref HEAD)
    echo $current_branch
}

gcm() {
    run_command "git checkout $(get_master_branch)"
}

gpc() {
    # log "Getting latest changes from the 'master|main' branch..."
    run_command "git pull --ff-only origin $(get_current_branch)"
}

gbu() {
    # create a git branch with user info
    local branch_name=$1
    run_command "git checkout -b user/$(get_alias)/$branch_name"
}

gsync() {
    # sync current `master` branch
    local previous_branch=$(git rev-parse --abbrev-ref @{-1})

    gcm && gpc && \
        run_command "git checkout $previous_branch" && \
        run_command "git checkout $(get_current_branch)"
}

## marktext
alias marktext="/Applications/Mark\ Text.app/Contents/MacOS/Mark\ Text"

## aws
alias aws="PAGER=cat aws"

## application Shortcuts
alias typora="open -a typora"

## poetry
alias ppp="poetry run task"

gradle() {
    if [[ -f ./gradlew ]]; then
        echo ">>>>>> Using ./gradlew wrapper instead of system gradle <<<<<<"
        ./gradlew $@
    elif [[ -f /usr/local/bin/gradle ]]; then
        echo ">>>>> Using system gradle: $(which gradle) <<<<<"
        $(which gradle) $@
    else
        echo ">>>>> No gradle found <<<<<"
    fi
}

mvn() {
    if [[ -f ./mvnw ]]; then
        echo ">>>>>> Using ./mvnw wrapper instead of system maven <<<<<<"
        ./mvnw $@
    elif [[ -f /usr/local/bin/maven ]]; then
        echo ">>>>> Using system maven: $(which mvn) <<<<<"
        $(which mvn) $@
    else
        echo ">>>>> No maven found <<<<<"
    fi
}

cat() {
    if type ccat >/dev/null 2>&1; then
        ccat $@ ;
    else
        cat $@ ;
    fi
}

mcd() { mkdir -p "$1"; cd "$1";}

cls() { cd "$1"; ls;}

backup() { cp "$1"{,.bak};}

# alias ..='cd ..'
# alias ...='cd ../..'

soundsgood() {
    sudo killall coreaudiod
    # alias soundsgood='sudo kextunload /System/Library/Extensions/AppleHDA.kext;sudo kextload /System/Library/Extensions/AppleHDA.kext'
}

# determine operating system
myos=`uname -s`

case "$myos" in
	# Mac OS X specific aliases
	Darwin)
		# alias fnote='find ~/pHome/pNote -type f -name "*.md" | xargs grep -i'
		# alias sublime='open -a "Sublime Text"'
		alias click='open .'
		;;
	# Linux
	Linux)
		alias click='nautilus .'
		# alias fnote='find ~/pNote -type f -name "*.md" | xargs grep -i'
		alias gstory="git branch --remote --no-merged master | sed 's/origin\//origin\/    /g' | grep 'B-\|D-'"
		# command
		# alias amq='/opt/apache-activemq-5.9.0/bin/activemq'
		;;
	*) ;;
esac
